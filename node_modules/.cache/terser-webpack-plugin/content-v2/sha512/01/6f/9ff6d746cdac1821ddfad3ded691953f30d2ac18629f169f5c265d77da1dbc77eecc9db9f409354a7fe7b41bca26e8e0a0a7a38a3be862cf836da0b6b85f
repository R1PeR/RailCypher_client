{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\project10_client\\\\src\\\\App.js\",\"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\project10_client\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\project10_client\\\\src\\\\index.js\"],\"names\":[\"App\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"input\",\"output\",\"event\",\"setState\",\"target\",\"value\",\"type\",\"message\",\"_this2\",\"options\",\"method\",\"headers\",\"Content-Type\",\"body\",\"JSON\",\"stringify\",\"decodeMessage\",\"encodeMessage\",\"fetch\",\"then\",\"response\",\"json\",\"data\",\"result\",\"console\",\"log\",\"error\",\"_this3\",\"react_default\",\"a\",\"createElement\",\"className\",\"Card_default\",\"style\",\"padding\",\"Typography_default\",\"Input_default\",\"id\",\"onChange\",\"changeHandle\",\"bind\",\"Button_default\",\"width\",\"variant\",\"color\",\"onClick\",\"fetchData\",\"TextField_default\",\"fontSize\",\"disabled\",\"margin\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"mRAuEeA,cA5Db,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GACPC,OAAQ,IAJIT,4EAOLU,GACXP,KAAKQ,SAAS,CACVH,MAAOE,EAAME,OAAOC,0CAGhBC,EAAKC,GAAQ,IAAAC,EAAAb,KAEjBc,EAAU,GACF,WAATH,EACDG,EAAU,CACRC,OAAQ,OACRC,QAAS,CAACC,eAAgB,oBAC1BC,KAAKC,KAAKC,UAAU,CACnBC,cAAgBT,KAGH,WAATD,IACNG,EAAU,CACTC,OAAQ,OACRC,QAAS,CAACC,eAAgB,mCAC1BC,KAAKC,KAAKC,UAAU,CACnBE,cAAgBV,MAIrB,IACEW,MAAM,mCAAmCZ,EAAMG,GAC9CU,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAId,EAAKL,SAAS,CAAEF,OAAQqB,EAAKC,WAC3CC,QAAQC,IAAI9B,KAAKI,MAAME,QACxB,MAAOyB,GACNF,QAAQE,MAAM,YAAaA,qCAGtB,IAAAC,EAAAhC,KACP,OACEiC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAME,UAAU,OAAOE,MAAO,CAACC,QAAQ,KACrCN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KAAA,gBACAD,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOQ,GAAG,OAAOhC,MAAOV,KAAKI,MAAMC,MAAOsC,SAAU3C,KAAK4C,aAAaC,KAAK7C,QAC3EiC,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAQI,MAAO,CAACS,MAAM,KAAMC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,WAAKlB,EAAKmB,UAAU,SAASnB,EAAK5B,MAAMC,SAAjH,UACA4B,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAQI,MAAO,CAACS,MAAM,KAAMC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,WAAKlB,EAAKmB,UAAU,SAASnB,EAAK5B,MAAMC,SAAjH,WAEF4B,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAWI,MAAO,CAACe,SAAS,KAAMC,UAAQ,EAACZ,GAAG,eAAea,OAAO,SAASP,QAAQ,SAAStC,MAAOV,KAAKI,MAAME,mBArD1GkD,EAAAA,WCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport './App.css';\\nimport Button from '@material-ui/core/Button';\\nimport Input from '@material-ui/core/Input';\\nimport InputLabel from '@material-ui/core/InputLabel';\\nimport TextField from '@material-ui/core/TextField'\\nimport Card from '@material-ui/core/Card';\\nimport Typography from '@material-ui/core/Typography';\\n\\n\\nclass App extends Component {\\n  constructor(props){\\n      super(props);\\n      this.state = {\\n        input: '',\\n        output: ''\\n      };\\n  }\\n  changeHandle(event){\\n    this.setState({\\n        input: event.target.value\\n    });\\n  }\\n  fetchData(type,message){\\n    var typeMessage = type+\\\"Message\\\";\\n    var options = {};\\n    if(type === \\\"decode\\\"){\\n      options = {\\n        method: \\\"POST\\\",\\n        headers: {\\\"Content-Type\\\": \\\"application/json\\\"},\\n        body:JSON.stringify({\\n  \\t      decodeMessage : message\\n        })\\n      }\\n    }else if(type === \\\"encode\\\"){\\n       options = {\\n        method: \\\"POST\\\",\\n        headers: {\\\"Content-Type\\\": \\\"application/json; charset=utf-8\\\"},\\n        body:JSON.stringify({\\n  \\t      encodeMessage : message\\n        })\\n      }\\n    }\\n    try {\\n      fetch(\\\"http://localhost:8080/api/fence/\\\"+type, options)\\n      .then(response => response.json())\\n      .then(data => this.setState({ output: data.result }));\\n      console.log(this.state.output);\\n    }catch (error){\\n      console.error(\\\"Error is:\\\" +error);\\n    }\\n  }\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <div className=\\\"App-header\\\">\\n          <Card className=\\\"card\\\" style={{padding:20}}>\\n            <Typography>Fence Cipher</Typography>\\n            <Input id=\\\"text\\\" value={this.state.input} onChange={this.changeHandle.bind(this)}></Input>\\n            <div>\\n              <Button style={{width:100}} variant=\\\"contained\\\" color=\\\"primary\\\" onClick={()=>{this.fetchData(\\\"encode\\\",this.state.input)}}>ENCODE</Button>\\n              <Button style={{width:100}} variant=\\\"contained\\\" color=\\\"primary\\\" onClick={()=>{this.fetchData(\\\"decode\\\",this.state.input)}}>DECODE</Button>\\n            </div>\\n            <TextField style={{fontSize:200}} disabled id=\\\"filled-error\\\" margin=\\\"normal\\\" variant=\\\"filled\\\" value={this.state.output}></TextField>\\n          </Card>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App ;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{251:function(e,t,n){\"use strict\";n.r(t);var a=n(1),o=n.n(a),i=n(14),r=n.n(i),c=(n(95),n(81)),s=n(82),l=n(88),u=n(83),d=n(89),h=(n(97),n(47)),p=n.n(h),m=n(27),f=n.n(m),v=n(87),y=n.n(v),E=n(84),g=n.n(E),w=n(86),b=n.n(w),O=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).state={input:\"\",output:\"\"},n}return Object(d.a)(t,e),Object(s.a)(t,[{key:\"changeHandle\",value:function(e){this.setState({input:e.target.value})}},{key:\"fetchData\",value:function(e,t){var n=this,a={};\"decode\"===e?a={method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({decodeMessage:t})}:\"encode\"===e&&(a={method:\"POST\",headers:{\"Content-Type\":\"application/json; charset=utf-8\"},body:JSON.stringify({encodeMessage:t})});try{fetch(\"http://localhost:8080/api/fence/\"+e,a).then(function(e){return e.json()}).then(function(e){return n.setState({output:e.result})}),console.log(this.state.output)}catch(o){console.error(\"Error is:\"+o)}}},{key:\"render\",value:function(){var e=this;return o.a.createElement(\"div\",{className:\"App\"},o.a.createElement(\"div\",{className:\"App-header\"},o.a.createElement(g.a,{className:\"card\",style:{padding:20}},o.a.createElement(b.a,null,\"Fence Cipher\"),o.a.createElement(f.a,{id:\"text\",value:this.state.input,onChange:this.changeHandle.bind(this)}),o.a.createElement(\"div\",null,o.a.createElement(p.a,{style:{width:100},variant:\"contained\",color:\"primary\",onClick:function(){e.fetchData(\"encode\",e.state.input)}},\"ENCODE\"),o.a.createElement(p.a,{style:{width:100},variant:\"contained\",color:\"primary\",onClick:function(){e.fetchData(\"decode\",e.state.input)}},\"DECODE\")),o.a.createElement(y.a,{style:{fontSize:200},disabled:!0,id:\"filled-error\",margin:\"normal\",variant:\"filled\",value:this.state.output}))))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(O,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},90:function(e,t,n){e.exports=n(251)},95:function(e,t,n){},97:function(e,t,n){}},[[90,2,1]]]);","extractedComments":[]}